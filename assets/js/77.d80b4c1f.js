(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{385:function(e,a,t){"use strict";t.r(a);var n=t(1),s=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"单元测试总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单元测试总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 单元测试总结")]),e._v(" "),t("h2",{attrs:{id:"bdd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bdd","aria-hidden":"true"}},[e._v("#")]),e._v(" BDD")]),e._v(" "),t("blockquote",[t("p",[e._v("Behavior Driven Development（行为驱动开发）")])]),e._v(" "),t("h2",{attrs:{id:"tdd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tdd","aria-hidden":"true"}},[e._v("#")]),e._v(" TDD")]),e._v(" "),t("blockquote",[t("p",[e._v("Test Driven Development（测试驱动开发）")])]),e._v(" "),t("ol",[t("li",[e._v("先写错误情况（比如邮箱验证，先观察测试能否发现邮箱格式不正确的情况），再写正确情况")]),e._v(" "),t("li",[e._v("手动添加实例监听事件（listener），手动触发元素事件（trigger），观察回调函数是否执行（callback）")])]),e._v(" "),t("h2",{attrs:{id:"目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录结构","aria-hidden":"true"}},[e._v("#")]),e._v(" 目录结构")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("|-- tests\n    |-- fixture\n    |   |-- db.js\n    |-- unit\n        |-- xxx.test.spec.js\n")])])]),t("ul",[t("li",[e._v("tests/fixture: 用于存放测试数据。")]),e._v(" "),t("li",[e._v("tests/unit: 用于存放测试用例。")])]),e._v(" "),t("h2",{attrs:{id:"测试对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 测试对象")]),e._v(" "),t("ul",[t("li",[e._v("测DOM元素是否存在")]),e._v(" "),t("li",[e._v("测事件")]),e._v(" "),t("li",[e._v("css不测")])]),e._v(" "),t("h2",{attrs:{id:"karma"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#karma","aria-hidden":"true"}},[e._v("#")]),e._v(" Karma")]),e._v(" "),t("ul",[t("li",[e._v("作用")])]),e._v(" "),t("blockquote",[t("p",[e._v("提供测试环境（呼起浏览器，加载测试脚本，然后运行测试用例）")])]),e._v(" "),t("ul",[t("li",[e._v("配置")])]),e._v(" "),t("blockquote",[t("p",[e._v("具体配置写在 karma.conf.js 中")])]),e._v(" "),t("ul",[t("li",[e._v("JSDOM")])]),e._v(" "),t("blockquote",[t("p",[e._v("与Karma作用类似,是在 Node 虚拟浏览器环境运行测试。也就是说它不呼起浏览器。")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://vue-test-utils.vuejs.org/zh/guides/testing-single-file-components-with-karma.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("用 Karma 测试单文件组件"),t("OutboundLink")],1)])]),e._v(" "),t("h4",{attrs:{id:"mocha-chai-sinon"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mocha-chai-sinon","aria-hidden":"true"}},[e._v("#")]),e._v(" Mocha,chai,Sinon")]),e._v(" "),t("p",[e._v("只是提供测试语法")]),e._v(" "),t("ul",[t("li",[e._v("Mocha")])]),e._v(" "),t("blockquote",[t("p",[e._v("describe,it 语法")])]),e._v(" "),t("ul",[t("li",[e._v("chai")])]),e._v(" "),t("blockquote",[t("p",[e._v("expect 语法")])]),e._v(" "),t("ul",[t("li",[e._v("Sinon/Sinon-Chai")])]),e._v(" "),t("blockquote",[t("p",[e._v("为组件的事件测试设置回调函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const callback = sinon.fake();\n")])])]),t("h4",{attrs:{id:"事件测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件测试","aria-hidden":"true"}},[e._v("#")]),e._v(" 事件测试")]),e._v(" "),t("ul",[t("li",[e._v("为什么测试'点击 button 触发 touch 事件'不能用以下方式")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vm.$on('touch', function(){\n    console.log('touch')\n    expect(1).to.eq(1)\n})\nvm.$el.click()\n")])])]),t("ol",[t("li",[e._v("因为我们要用 expect 实现“监听touch事件”，不能用 console.log")]),e._v(" "),t("li",[e._v("但是 expect(1).to.eq(1) 这种写法不能让我们知道回调函数是否执行")])]),e._v(" "),t("blockquote",[t("p",[e._v('所以我们需要的是：用 expect 描述"回调函数被执行了"这件事情')])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const callback = sinon.fake(); // 一但 callback 被调用，会再内存中留下标记\nvm.$on('touch', callback)\nvm.$el.click() // 注意如果测试正确，这里 callback 已经被调用了\nexpect(callback).to.have.been.called // 去问内存：callback 是否被调用了？\n")])])]),t("ul",[t("li",[e._v("listeners:添加在实例上，用于设置组件的update/add:selected之类事件的回调函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("it('会触发 update:selected 事件', (done) => {\n    Vue.component('g-nav-item', NavItem)\n    const callback = sinon.fake();\n    const wrapper = mount(Nav, {\n        propsData: {\n            selected: 'home'\n        },\n        slots: {\n            default: `\n    <g-nav-item name=\"developers\">开发团队</g-nav-item>\n`\n        },\n        listeners: {\n            'update:selected': callback\n        }\n    })\n    wrapper.find('[data-name=\"developers\"]').trigger('click')\n    expect(callback).to.have.been.calledWith('developers')\n    done()\n})\n")])])]),t("h2",{attrs:{id:"关于异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于异步","aria-hidden":"true"}},[e._v("#")]),e._v(" 关于异步")]),e._v(" "),t("blockquote",[t("p",[e._v("由于DOM元素的渲染是异步的，所以我们往往需要在设置 PropsData 后异步地测试DOM元素情况")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("it('toast 接受 autoClose　属性', (done) => {\n    const wrapper = mount(Toast, {\n        propsData: {\n            autoClose: 1\n        },\n    })\n    // 确保在vm.execAutoClose执行后再去判断vm.$el是否被移出document.body\n    setTimeout(() => {\n        // 判断vm.$el是否被移出document.body\n        expect(document.body.contains(wrapper.element)).to.equal(false)\n        done()\n    }, wrapper.props('autoClose') * 1000)\n})\n")])])]),t("h2",{attrs:{id:"data-xxx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-xxx","aria-hidden":"true"}},[e._v("#")]),e._v(" data-xxx")]),e._v(" "),t("blockquote",[t("p",[e._v("对于 selected 属性的测试，常用 data-xxx 来标记DOM元素")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<nav-item name="home"></nav-item>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// nav-item.vue\n<template>\n    <div :data-name="name" :class="{selected}">\n    ...\n    </div>\n</template>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  it('支持 selected 属性', (done) => {\n    Vue.component('g-nav-item', NavItem)\n    const wrapper = mount(Nav, {\n      propsData: {\n        selected: 'home'\n      },\n        ...\n      }\n    })\n    setTimeout(() => {\n      expect(wrapper.find('[data-name=\"home\"].selected').exists()).to.be.true\n      done()\n    })\n  })\n")])])]),t("h2",{attrs:{id:"优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优先级","aria-hidden":"true"}},[e._v("#")]),e._v(" 优先级")]),e._v(" "),t("blockquote",[t("p",[e._v("比如邮箱验证时，required 的优先级高于 pattern")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("it('required & pattern', () => {\n    let data = {\n        email: ''\n    }\n    let rules = [\n        {key: 'email',pattern:'email',required:true}\n    ]\n    let errors = validate(data, rules)\n    expect(errors.email.required).to.eq('必填')\n    expect(errors.email.pattern).to.not.exist // 只显示\"必填\"这一错误信息\n})\n")])])]),t("blockquote",[t("p",[e._v("而 pattern 与 minLength 同级")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("it('pattern & minLength', () => {\n    let data = {\n        email: '12'\n    }\n    let rules = [\n        {key: 'email', pattern: 'email', required: true, minLength: 6}\n    ]\n    let errors = validate(data, rules)\n    expect(errors.email.pattern).to.eq('格式不正确')\n    expect(errors.email.minLength).to.eq('太短')\n})\n")])])])])},[],!1,null,null,null);a.default=s.exports}}]);